-> Laravel includes the ability to seed your database with data using seed classes
-> All seed classes are stored in the database/seeders directory
-> Default:DatabaseSeeder class from which we may use the Call() method to run other seeder classes in order.
Note: Mass assignment protection is automatically disabled during database seeding !

-> Writing Seeders :

    - php artisan make:seeder UserSeeder
    - contain only one method by default - run():void
    - Data insert to database via :
    
        - use query builder to manually insert data :
            Example :
            public function run(): void
            {
                DB::table('users')->insert([
                    'name' => Str::random(10),
                    'email'=>Str::random(10).'@gmail.com',
                    'password' => Hash::make('secret')
                ]);
            }

        - use Eloquant model factories ;
            Example :
            public function run(): void
            {
                User::factory()->count(50)->hasPosts(1)->create();
            }

        - Calling Additional Seeders :
            - using call() method 
            Example :
            public function run(): void
            {
                $this->call([
                    UserSeeder::class,
                    PostSeeder::class,
                    CommentSeeder::class
                ]);
            }

        - Muting Model Events :
            - while running seeds, you may want to prevent models from dispatching events.
            - use Illuminate\Database\Console\Seeds\WithoutModelEvents trait

-> Running Seeders:
    - php artisan db:seed (Default:Database\Seeders\DatabaseSeeder class)
    - php artisan db:seed --class=PostSeeder
    - php artisan migrate:fresh --seed
    - php artisan migrate:fresh --seed --seeder=UserSeeder
    - Forcing Seeders To Run In Production :
        - php artisan db:seed --force