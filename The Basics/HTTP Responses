-> Creating Responses

    - Strings & Arrays :
        - using return keyword - laravel will automatically convert string into full Http response & array to a Json response

    - Response Objects:
        - Illuminate\Http\Response() instance inherits from the Symfony\Component\HttpFoundation\Response class
        - which provides a variety of methods for building HTTP responses like header()
            Ex.
                return response('Hello World', 200)->header('Content-Type', 'text/plain');
                
    - Eloquent Models & Collections:
        - We can also return Eloquent ORM model & Collection which automatically convert to Json response respecting hidden attributes
            Ex.
                return \App\Models\User::first();

    - Attaching Headers To Responses:
        - most response methods are chainable
            Ex.
                return response($content)
                    ->header('Content-Type', 'text/plain')->header('second-header','second-header-value')header('third-header','third-header-value')...;
        - Or you may use withHeaders($associativeArrayOfHeaders) method
        - Cache Control Middleware
    
    - Attaching Cookies To Responses:
        - cookie($name,$value,$minutes,...other cookie parameters) method
        Ex.
            return response('Hello World')->cookie(
                'name', 'value', $minutes
            );
        Ex.
            use Illuminate\Support\Facades\Cookie;
            Cookie::queue('name', 'value', $minues);

    - Generating Cookie Instances
        Ex.
            $cookie = cookie('name', 'value', $minutes);

    - Expiring Cookies Early
        Ex. 
            response()->withoutCookie('name')
            OR
            Cookie::expire('name');

    - Cookies & Encryption :
        - By default all cookies generated by Laravel are encrypted and signed, can't be modified or read by the client
        - For disable encryption : $except property of App\Http\Middleware\EncryptCookies middleware

-> Redirects

    - instance of Illuminate\Http\RedirectResponse class

    - to redirect at previous location - back()->withInput() // withInput() is optional

    - Redirecting To Named Routes:
        Ex.
            return redirect()->route('profile', ['id' => 1]);

    - Populating Parameters Via Eloquent Models

    - Redirecting To Controller Actions
        Ex. 
            return redirect()->action([Controller::class,'actionName'],[parameters if required])

    - Redirecting To External Domains
        Ex.
            return redirect()->away('https://www.google.com');

    - Redirecting With Flashed Session Data
        Ex.
            return redirect()->with('key_name','value');

    - Redirecting With Input :
        - to flash the current request's Input data to the session before redirecting to a new location
        Ex.
            return back()->withInput();

-> Other Response Types
    
    - View Responses:
        - view() global helper method
            Ex. return view('view_name',$data,200)->header('Content-Type', $type);

    - JSON Responses:
        - automatically set Content-Type header to 'application/json' & given array to JSON using json_encode function
            Ex.
                return response()->json($arrayOfData);
        - withCallback() method

    - File Downloads:
        - return response()->download($pathToFile, $name, $headers);

    - Streamed Downloads: Pending...

    - File Responses :
        - Display file, such as an image or PDF, directly in the user's browser
        Ex. return response()->file($pathToFile, $headers);

    - Response Macros:
        - custom response to re-use any routes & controllers
        - macro method of the response facades(Illuminate\Support\Facades\Response)
        - boot() method of any service providers (App\Providers\AppServiceProvider)
            Ex.
                Define :
                    public function boot(): void
                    {
                        Response::macro('caps', function (string $value) {
                            return Response::make(strtoupper($value));
                        });
                    }
                Use :
                    return response()->caps('foo');