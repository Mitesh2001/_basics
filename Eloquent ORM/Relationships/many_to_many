=> Many to Many Relationship
    - For example :
        users
            id - integer
            name - string
        
        roles
            id - integer
            name - string
        
        role_user
            user_id - integer
            role_id - integer

    - return $this->belongsToMany(Role::class, 'role_user', 'user_id', 'role_id');
    - Defining The Inverse Of The Relationship :
        - return $this->belongsToMany(Role::class, 'role_user', 'user_id', 'role_id');
    - Retrieving Intermediate Table Columns
        - withPivot(column1,column2...)
        - withTimestamps();
        - using pivot key
    - Filtering Queries Via Intermediate Table Columns :
        Example : return $this->belongsToMany(Podcast::class)->as('subscriptions')->wherePivotBetween('created_at', ['2020-01-01 00:00:00', '2020-12-31 00:00:00']);
        - wherePivot(),
        - wherePivotIn(),
        - wherePivotNotIn(),
        - wherePivotBetween(),
        - wherePivotNotBetween(),
        - wherePivotNull(),
        - wherePivotNotNull()
    - Ordering Queries Via Intermediate Table Columns:
        - orderByPivot:
            return $this->belongsToMany(Badge::class)->where('rank', 'gold')->orderByPivot('created_at', 'desc');
    - Defining Custom Intermediate Table Models:
        - Custom many-to-many pivot models should extend the Illuminate\Database\Eloquent\Relations\Pivot class
        - In Role model relationship function : return $this->belongsToMany(User::class)->using(RoleUser::class);
    - Custom Pivot Models And Incrementing IDs :
        - In custom pivot model class : public $incrementing = true;