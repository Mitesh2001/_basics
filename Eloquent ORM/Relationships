- For managing table related to each other
- Relationships are defined as methods on Eloquent model classes

-> One to One:
    - hasOne method is available to your model via the model's Illuminate\Database\Eloquent\Model base class :
        For example,
        {
            return $this->hasOne(Model_class,'foreign_key','local_key')  
        }
    - inverse of the relationship:
        {
            return $this->belongsTo(Model::class,'foreign_key','owner_key')
        }
-> One to Many:
    For example,
        {
            return $this->hasMany(Model::class,'foreign_key','local_key');
        }
    - with query: return Model::find(1)->where(condition)->first()
-> One To Many (Inverse) / Belongs To
    - return $this->belongsTo(ParentModel::class,'foreign_key','owner_key')
    - Default Models : withDefault() allow you to define a default model that will be returned if the given relationship is null
    - return Model::whereBelongsTo($user,<relationShipName>)->get();
-> Has One Of Many
    - to get latest or oldest related model of the Relationships :
        - Default By primary key :
        - return $this->hasOne(Model::class)->latestOfMany()
        - return $this->hasOne(Model::class)->oldestOfMany()
        - ofMany()
        - Advanced Has One Of Many Relationships
-> Has One Through
    - return $this->hasOneThrough(
        Owner::class,
        Car::class,
        'mechanic_id', // Foreign key on the cars table...
        'car_id', // Foreign key on the owners table...
        'id', // Local key on the mechanics table...
        'id' // Local key on the cars table...
    )

    // String based syntax...
    - return $this->through('cars')->has('owner');
    
    // Dynamic syntax...
    - return $this->throughCars()->hasOwner();

-> Has many Through
    - return $this->hasManyThrough(
        Deployment::class,
        Environment::class,
        'project_id', // Foreign key on the environments table...
        'environment_id', // Foreign key on the deployments table...
        'id', // Local key on the projects table...
        'id' // Local key on the environments table...
    )

    // String based syntax...
    - return $this->through('environments')->has('deployments');
    
    // Dynamic syntax...
    - return $this->throughEnvironments()->hasDeployments();

-> Many to Many Relationship
    - For example :
        users
            id - integer
            name - string
        
        roles
            id - integer
            name - string
        
        role_user
            user_id - integer
            role_id - integer

    - return $this->belongsToMany(Role::class, 'role_user', 'user_id', 'role_id');
    - Defining The Inverse Of The Relationship :
        - return $this->belongsToMany(Role::class, 'role_user', 'user_id', 'role_id');
    - Retrieving Intermediate Table Columns
        - withPivot(column1,column2...)
        - withTimestamps();
        - using pivot key
    - Filtering Queries Via Intermediate Table Columns :
        Example : return $this->belongsToMany(Podcast::class)->as('subscriptions')->wherePivotBetween('created_at', ['2020-01-01 00:00:00', '2020-12-31 00:00:00']);
        - wherePivot(),
        - wherePivotIn(),
        - wherePivotNotIn(),
        - wherePivotBetween(),
        - wherePivotNotBetween(),
        - wherePivotNull(),
        - wherePivotNotNull()
    - Ordering Queries Via Intermediate Table Columns:
        - orderByPivot:
            return $this->belongsToMany(Badge::class)->where('rank', 'gold')->orderByPivot('created_at', 'desc');
    - Defining Custom Intermediate Table Models:
        - Custom many-to-many pivot models should extend the Illuminate\Database\Eloquent\Relations\Pivot class
        - In Role model relationship function : return $this->belongsToMany(User::class)->using(RoleUser::class);
    - Custom Pivot Models And Incrementing IDs :
        - In custom pivot model class : public $incrementing = true;
